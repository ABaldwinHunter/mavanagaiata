/**
 * This code is free software; you can redistribute it and/or modify it under
 * the terms of the new BSD License.
 *
 * Copyright (c) 2011-2012, Sebastian Staudt
 */

package com.github.koraktor.mavanagaiata;

import java.io.IOException;

import org.junit.Test;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertThat;

public class GitContributorsMojoTest extends AbstractGitOutputMojoTest<GitContributorsMojo> {

    @Test
    public void testError() {
        super.testError("Unable to read contributors from Git");
    }

    @Test
    public void testCustomization() throws Exception {
        this.mojo.baseDateFormat    = "MM/dd/yy";
        this.mojo.contributorPrefix = "- ";
        this.mojo.footer            = "\nCreated by Mavanagaiata on %s";
        this.mojo.header            = "Authors\\n-------\\n";
        this.mojo.showCounts        = false;
        this.mojo.showEmail         = true;
        this.mojo.execute();

        assertThat(this.reader.readLine(), is(equalTo("Authors")));
        assertThat(this.reader.readLine(), is(equalTo("-------")));
        assertThat(this.reader.readLine(), is(equalTo("")));
        assertThat(this.reader.readLine(), is(equalTo("- Sebastian Staudt (koraktor@gmail.com)")));
        assertThat(this.reader.readLine(), is(equalTo("- John Doe (johndoe@example.com)")));
        assertThat(this.reader.readLine(), is(equalTo("")));
        assertMatches("Created by Mavanagaiata on \\d{2}/\\d{2}/\\d{2}", reader.readLine());
        assertThat(this.reader.ready(), is(false));
    }

    @Test
    public void testSortDate() throws Exception {
        this.mojo.sort = "date";
        this.mojo.execute();

        this.assertOutput();
    }

    @Test
    public void testSortName() throws Exception {
        this.mojo.footer     = "";
        this.mojo.sort       = "name";
        this.mojo.showCounts = false;
        this.mojo.execute();

        assertThat(this.reader.readLine(), is(equalTo("Contributors")));
        assertThat(this.reader.readLine(), is(equalTo("============")));
        assertThat(this.reader.readLine(), is(equalTo("")));
        assertThat(this.reader.readLine(), is(equalTo(" * John Doe")));
        assertThat(this.reader.readLine(), is(equalTo(" * Sebastian Staudt")));
        assertThat(this.reader.ready(), is(false));
    }

    protected void assertOutput() throws IOException {
        assertThat(this.reader.readLine(), is(equalTo("Contributors")));
        assertThat(this.reader.readLine(), is(equalTo("============")));
        assertThat(this.reader.readLine(), is(equalTo("")));
        assertThat(this.reader.readLine(), is(equalTo(" * Sebastian Staudt (4)")));
        assertThat(this.reader.readLine(), is(equalTo(" * John Doe (1)")));
        assertThat(this.reader.readLine(), is(equalTo("")));
        assertMatches("Generated by Mavanagaiata at \\d{2}/\\d{2}/\\d{4} \\d{2}:\\d{2} [AP]M [+\\-]\\d{4}", this.reader.readLine());
        assertThat(this.reader.ready(), is(false));
    }

}
